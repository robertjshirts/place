This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-14T22:41:58.262Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    api/
      canvas/
        cooldown/
          route.ts
        route.ts
    globals.css
    layout.tsx
    page.tsx
  components/
    ui/
      button.tsx
      sonner.tsx
    Canvas.tsx
    ColorPicker.tsx
    CooldownTimer.tsx
    Navbar.tsx
  lib/
    db.ts
    utils.ts
  middleware.ts
.gitignore
components.json
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tsconfig.json

================================================================
Files
================================================================

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/api/canvas/cooldown/route.ts
================
import { NextResponse } from 'next/server';
import { currentUser } from '@clerk/nextjs/server';

// Import shared cooldown state
import { getUserLastPlaced, COOLDOWN_TIME } from '@/lib/db';

export async function GET() {
  const user = await currentUser();
  
  if (!user) {
    return NextResponse.json(
      { error: 'Not authenticated' },
      { status: 401 }
    );
  }
  
  const now = Date.now();
  const lastPlaced = await getUserLastPlaced(user.username!);
  
  if (!lastPlaced || now - lastPlaced >= COOLDOWN_TIME) {
    return NextResponse.json({ ready: true });
  }
  
  const remainingTime = Math.ceil((COOLDOWN_TIME - (now - lastPlaced)) / 1000);
  return NextResponse.json(
    { ready: false, remainingTime },
    { status: 200 }
  );
}

================
File: src/app/api/canvas/route.ts
================
import { NextRequest, NextResponse } from 'next/server';
import { currentUser } from '@clerk/nextjs/server';
import { getCanvasState, getUserLastPlaced, COOLDOWN_TIME, CANVAS_SIZE, saveUserLastPlaced, saveCanvasState } from '@/lib/db';

export async function GET() {
  const canvasState = await getCanvasState();
  return NextResponse.json(canvasState);
}

export async function POST(request: NextRequest) {
  try {
    const { x, y, color } = await request.json();
    const user = await currentUser();
    if (!user) {
      return NextResponse.json(
        { error: "Not authorized" },
        { status: 401},
      )
    }
    
    // Validate input
    if (
      typeof x !== 'number' || 
      typeof y !== 'number' || 
      typeof color !== 'string' || 
      x < 0 || 
      x >= CANVAS_SIZE || 
      y < 0 || 
      y >= CANVAS_SIZE
    ) {
      return NextResponse.json(
        { error: 'Invalid input' },
        { status: 400 }
      );
    }
    
    // Check if user is on cooldown
    const now = Date.now();
    const lastPlaced = await getUserLastPlaced(user.username!);
    
    if (lastPlaced && now - lastPlaced < COOLDOWN_TIME) {
      const remainingTime = Math.ceil((COOLDOWN_TIME - (now - lastPlaced)) / 1000);
      return NextResponse.json(
        { error: `You need to wait ${remainingTime} seconds before placing another pixel` },
        { status: 429 }
      );
    }
    
    // Update pixel and user's last placed time
    const canvasState = await getCanvasState();
    canvasState.pixels[y][x] = {
      color,
      lastUpdated: now,
      lastUpdatedBy: user.username!,
    };
    saveUserLastPlaced(user.username!, now);
    saveCanvasState(canvasState);
    
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error updating canvas:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

================
File: src/app/globals.css
================
@import "tailwindcss";

@plugin "tailwindcss-animate";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { ClerkProvider } from "@clerk/nextjs";
import { Toaster } from "@/components/ui/sonner";
import Navbar from "@/components/Navbar";
import { dark } from "@clerk/themes";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="dark">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <ClerkProvider
          appearance={{
            baseTheme: dark
          }}
        >
          <Navbar />
          {children}
          <Toaster />
        </ClerkProvider>
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
import dynamic from 'next/dynamic';

// Use dynamic import with no SSR for the Canvas component
// This is necessary because it uses browser APIs like localStorage
const Canvas = dynamic(() => import('@/components/Canvas'));

export default function Home() {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen p-4">
      <main className="w-full max-w-4xl">
        <Canvas />
      </main>
      
      <footer className="mt-8 text-center text-xs text-gray-500">
        <p>r/place Clone - A collaborative pixel canvas</p>
        <p className="mt-1">Each user can place one pixel per minute</p>
      </footer>
    </div>
  );
}

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }

================
File: src/components/ui/sonner.tsx
================
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner, ToasterProps } from "sonner"

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      style={
        {
          "--normal-bg": "var(--popover)",
          "--normal-text": "var(--popover-foreground)",
          "--normal-border": "var(--border)",
        } as React.CSSProperties
      }
      {...props}
    />
  )
}

export { Toaster }

================
File: src/components/Canvas.tsx
================
'use client';
import { useEffect, useState, useRef } from 'react';
import ColorPicker from './ColorPicker';
import CooldownTimer from './CooldownTimer';
import { useUser } from '@clerk/nextjs'
import { toast } from 'sonner';

type Pixel = {
  color: string;
  lastUpdated: number;
  lastUpdatedBy: string;
  pending?: boolean;
};

type CanvasState = {
  pixels: Pixel[][];
  size: number;
};

export default function Canvas() {
  const [canvasState, setCanvasState] = useState<CanvasState | null>(null);
  const [pendingChanges, setPendingChanges] = useState<Record<string, Pixel>>({});
  const [selectedColor, setSelectedColor] = useState('#000000');
  const [cooldownEnd, setCooldownEnd] = useState<number | null>(null);
  const [loading, setLoading] = useState(true);
  const { isSignedIn, user } = useUser();
  const canvasRef = useRef<HTMLDivElement>(null);
  const pixelSize = 10; // Size of each pixel in pixels

  // Define fetchCanvasState function before it's used in useEffect
  const fetchCanvasState = async () => {
    try {
      const response = await fetch('/api/canvas');
      if (!response.ok) {
        throw new Error('Failed to fetch canvas state');
      }
      const data = await response.json();
      
      // Merge server state with pending changes
      const mergedState = { ...data };
      for (const [key, pendingPixel] of Object.entries(pendingChanges)) {
        const [x, y] = key.split(',').map(Number);
        mergedState.pixels[y][x] = { ...mergedState.pixels[y][x], ...pendingPixel };
      }
      
      setCanvasState(mergedState);
      setLoading(false);
    } catch (error) {
      console.error('Error fetching canvas state:', error);
      toast.error('Error fetching canvas. Try reloading.')
      setLoading(false);
    }
  };

  // Initialize user ID and fetch canvas state
  useEffect(() => {
    fetchCanvasState();

    // Refresh canvas state every 5 seconds
    const intervalId = setInterval(fetchCanvasState, 5000);
    return () => clearInterval(intervalId);
  }, []);

  const handlePixelClick = async (x: number, y: number) => {
    if (!isSignedIn || !user || !canvasState) {
      toast.error('You must be signed in to place a pixel');
      return;
    }
    
    // Check if user is on cooldown
    if (cooldownEnd && Date.now() < cooldownEnd) {
      return;
    }

    try {
      const response = await fetch('/api/canvas', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          x,
          y,
          color: selectedColor,
          username: user.username,
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        if (response.status === 429) {
          // Parse the remaining time from the error message
          const match = data.error.match(/wait (\d+) seconds/);
          if (match && match[1]) {
            const seconds = parseInt(match[1], 10);
            setCooldownEnd(Date.now() + seconds * 1000);
          } else {
            setCooldownEnd(Date.now() + 60 * 1000); // Default to 60 seconds
          }
          return;
        }
        toast.error('Failed to paint pixel');
        return;
      }

      // Immediately update UI with pending change
      const newPendingChanges = { ...pendingChanges };
      const pixelKey = `${x},${y}`;
      newPendingChanges[pixelKey] = {
        color: selectedColor,
        lastUpdated: Date.now(),
        lastUpdatedBy: user.username || 'Anonymous',
        pending: true
      };
      setPendingChanges(newPendingChanges);
      
      // Set cooldown
      setCooldownEnd(Date.now() + 60 * 1000);
    } catch (error) {
      console.error('Error updating pixel:', error);
        toast.error('Failed to paint pixel');
    }
  };

  if (loading) {
    return <div className="flex justify-center items-center h-64">Loading canvas...</div>;
  }

  if (!canvasState) {
    return <div className="text-red-500 text-center">There seems to have been an error. Try reloading.</div>;
  }

  if (!canvasState) {
    return <div className="text-center">No canvas data available</div>;
  }

  return (
    <div className="flex flex-col items-center gap-4">
      <div className="text-center mb-2">
        <h2 className="text-xl font-bold mb-1">r/place Clone</h2>
        <p className="text-sm text-gray-600 dark:text-gray-400">
          Click on a pixel to change its color. You can place one pixel per minute.
        </p>
        {user?.username && (
          <p className="text-xs text-gray-500 mt-1">Signed in as: {user.username}</p>
        )}
      </div>

      <div className="relative">
        <div 
          ref={canvasRef}
          className="grid border border-gray-300 dark:border-gray-700"
          style={{
            gridTemplateColumns: `repeat(${canvasState.size}, ${pixelSize}px)`,
            width: `${canvasState.size * pixelSize}px`,
            height: `${canvasState.size * pixelSize}px`,
          }}
        >
          {canvasState.pixels.map((row, y) =>
            row.map((pixel, x) => (
              <div
                key={`${x}-${y}`}
                className={`cursor-pointer hover:opacity-80 transition-opacity ${
                  pixel.pending ? 'animate-pulse' : ''
                }`}
                style={{
                  backgroundColor: pixel.color,
                  width: `${pixelSize}px`,
                  height: `${pixelSize}px`,
                }}
                onClick={() => handlePixelClick(x, y)}
                title={`(${x + 1}, ${y + 1})`}
              />
            ))
          )}
        </div>
      </div>

      <div className="flex flex-col sm:flex-row items-center gap-4 mt-4">
        <ColorPicker selectedColor={selectedColor} onColorChange={setSelectedColor} />
        <CooldownTimer cooldownEnd={cooldownEnd} />
      </div>
    </div>
  );
}

================
File: src/components/ColorPicker.tsx
================
'use client';

import { useState } from 'react';

// Predefined color palette
const COLORS = [
  '#000000', // Black
  '#FFFFFF', // White
  '#FF0000', // Red
  '#00FF00', // Green
  '#0000FF', // Blue
  '#FFFF00', // Yellow
  '#FF00FF', // Magenta
  '#00FFFF', // Cyan
  '#FF8000', // Orange
  '#8000FF', // Purple
  '#FF0080', // Pink
  '#0080FF', // Light Blue
  '#808080', // Gray
  '#804000', // Brown
  '#408000', // Dark Green
  '#800040', // Burgundy
];

interface ColorPickerProps {
  selectedColor: string;
  onColorChange: (color: string) => void;
}

export default function ColorPicker({ selectedColor, onColorChange }: ColorPickerProps) {
  const [customColor, setCustomColor] = useState(selectedColor);
  const [showCustom, setShowCustom] = useState(false);

  const handleColorClick = (color: string) => {
    onColorChange(color);
  };

  const handleCustomColorChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const color = e.target.value;
    setCustomColor(color);
    onColorChange(color);
  };

  return (
    <div className="flex flex-col items-center gap-2">
      <div className="flex items-center gap-2">
        <span className="text-sm font-medium">Color:</span>
        <div 
          className="w-6 h-6 border border-gray-300 dark:border-gray-700"
          style={{ backgroundColor: selectedColor }}
        />
      </div>
      
      <div className="grid grid-cols-8 gap-1">
        {COLORS.map((color) => (
          <button
            key={color}
            className={`w-6 h-6 rounded-sm cursor-pointer hover:scale-110 transition-transform ${
              selectedColor === color ? 'ring-2 ring-blue-500 ring-offset-1' : 'border border-gray-300 dark:border-gray-700'
            }`}
            style={{ backgroundColor: color }}
            onClick={() => handleColorClick(color)}
            title={color}
            aria-label={`Select color ${color}`}
          />
        ))}
      </div>
      
      <button
        className="text-xs underline mt-1"
        onClick={() => setShowCustom(!showCustom)}
      >
        {showCustom ? 'Hide custom color' : 'Custom color'}
      </button>
      
      {showCustom && (
        <div className="flex items-center gap-2 mt-1">
          <input
            type="color"
            value={customColor}
            onChange={handleCustomColorChange}
            className="w-8 h-8"
          />
          <span className="text-xs">{customColor}</span>
        </div>
      )}
    </div>
  );
}

================
File: src/components/CooldownTimer.tsx
================
'use client';

import { useState, useEffect } from 'react';

interface CooldownTimerProps {
  cooldownEnd: number | null;
}

export default function CooldownTimer({ cooldownEnd: initialCooldown }: CooldownTimerProps) {
  const [timeRemaining, setTimeRemaining] = useState<number | null>(null);
  const [isSignedIn, setIsSignedIn] = useState(false);
  const [currentCooldownEnd, setCurrentCooldownEnd] = useState<number | null>(initialCooldown);

  // Initialize cooldown from props
  useEffect(() => {
    setIsSignedIn(true);
    setCurrentCooldownEnd(initialCooldown);
  }, [initialCooldown]);

  useEffect(() => {
    if (!currentCooldownEnd || !isSignedIn) {
      setTimeRemaining(null);
      return;
    }

    // Calculate initial time remaining
    const initialTimeRemaining = Math.max(0, currentCooldownEnd - Date.now());
    setTimeRemaining(initialTimeRemaining);

    // Update timer every second
    const intervalId = setInterval(() => {
      const remaining = Math.max(0, currentCooldownEnd - Date.now());
      setTimeRemaining(remaining);

      // Clear interval when timer reaches 0
      if (remaining <= 0) {
        clearInterval(intervalId);
        setTimeRemaining(null);
      }
    }, 1000);

    return () => clearInterval(intervalId);
  }, [currentCooldownEnd, isSignedIn]);

  if (!timeRemaining) {
    return (
      <div className="flex items-center gap-2">
        <div className="w-3 h-3 rounded-full bg-green-500"></div>
        <span className="text-sm">Ready to place a pixel</span>
      </div>
    );
  }

  // Format time remaining as MM:SS
  const seconds = Math.floor(timeRemaining / 1000);
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  const formattedTime = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;

  return (
    <div className="flex items-center gap-2">
      <div className="w-3 h-3 rounded-full bg-red-500"></div>
      <span className="text-sm">
        Cooldown: <span className="font-mono">{formattedTime}</span>
      </span>
    </div>
  );
}

================
File: src/components/Navbar.tsx
================
'use client';
import Link from 'next/link';
import { SignedIn, SignedOut, SignInButton, SignUpButton, UserButton } from '@clerk/nextjs';
import { Button } from './ui/button';

export default function Navbar() {
  return (
    <div className="fixed top-0 w-full bg-[var(--background)] border-b border-gray-300 dark:border-gray-700 py-3 px-4 flex justify-between items-center z-10">
      <Link href="/" className="text-xl font-bold">
        r/place Clone
      </Link>
      <div className="flex items-center gap-2">
        <SignedOut>
          <SignInButton>
            <Button>Sign In</Button>
          </SignInButton>
          <SignUpButton>
            <Button>Sign Up</Button>
          </SignUpButton>
        </SignedOut>
        <SignedIn>
          <UserButton />
        </SignedIn>
      </div>
    </div>
  );
}

================
File: src/lib/db.ts
================
import { MongoClient, Db, Collection } from 'mongodb';

// Constants
export const CANVAS_SIZE = 50;
export const DEFAULT_COLOR = '#FFFFFF';
export const COOLDOWN_TIME = 60 * 1000; // 1 minute in milliseconds

// Type definitions
export type Pixel = {
  color: string;
  lastUpdated: number;
  lastUpdatedBy: string;
};

export type CanvasState = {
  id: string;
  pixels: Pixel[][];
  size: number;
};

export type User = {
  id: string;
  lastPlaced: number;
};

// Database connection
const uri = process.env.MONGO_URL;
if (!uri) {
  throw new Error("MONGO_URL environment variable is not defined");
}

const client = new MongoClient(uri, {
  connectTimeoutMS: 5000,
  socketTimeoutMS: 10000,
  serverSelectionTimeoutMS: 5000,
});
let db: Db;
let canvasCollection: Collection<CanvasState>;
let usersCollection: Collection<User>;

/**
 * Connects to MongoDB and initializes collections
 */
async function connect(): Promise<void> {
  try {
    await client.connect();
    db = client.db('place');
    
    // Test the connection
    await db.command({ ping: 1 });
    
    // Initialize collections
    canvasCollection = db.collection<CanvasState>('canvas');
    usersCollection = db.collection<User>('users');
    
    // Ensure collections exist
    const collections = await db.listCollections().toArray();
    const collectionNames = collections.map((c) => c.name);
    
    if (!collectionNames.includes('canvas')) {
      await db.createCollection('canvas');
    }
    
    if (!collectionNames.includes('users')) {
      await db.createCollection('users');
    }
    
    console.log('Connected to MongoDB and ensured collections exist');
  } catch (err) {
    console.error('Error connecting to MongoDB:', err);
    throw new Error('Failed to connect to database. Please check your network connection and database status.');
  }
}

/**
 * Ensures database connection is established
 */
async function ensureConnection(): Promise<void> {
  if (!db) {
    await connect();
  }
}

/**
 * Saves the current canvas state to the database
 */
export async function saveCanvasState(state: CanvasState): Promise<void> {
  await ensureConnection();
  await canvasCollection.updateOne(
    { id: 'current' },
    { $set: { ...state, id: 'current' } },
    { upsert: true }
  );
}

/**
 * Records when a user last placed a pixel
 */
export async function saveUserLastPlaced(
  username: string,
  timestamp: number
): Promise<void> {
  await ensureConnection();
  await usersCollection.updateOne(
    { id: username },
    { $set: { id: username, lastPlaced: timestamp } },
    { upsert: true }
  );
}

/**
 * Creates a new blank canvas state
 */
function createNewCanvasState(): CanvasState {
  return {
    id: 'current',
    pixels: Array(CANVAS_SIZE)
      .fill(null)
      .map(() =>
        Array(CANVAS_SIZE)
          .fill(null)
          .map(() => ({
            color: DEFAULT_COLOR,
            lastUpdated: Date.now(),
            lastUpdatedBy: '',
          }))
      ),
    size: CANVAS_SIZE,
  };
}

/**
 * Retrieves the current canvas state or creates a new one if none exists
 */
export async function getCanvasState(): Promise<CanvasState> {
  await ensureConnection();
  const state = await canvasCollection.findOne({ id: 'current' });

  if (!state) {
    // Initialize new canvas state
    const newState = createNewCanvasState();
    await saveCanvasState(newState);
    return newState;
  }
  
  return state;
}

/**
 * Gets the timestamp of when a user last placed a pixel
 */
export async function getUserLastPlaced(username: string): Promise<number> {
  await ensureConnection();
  const user = await usersCollection.findOne({ id: username });
  return user?.lastPlaced ?? 0;
}

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/middleware.ts
================
import { clerkMiddleware } from '@clerk/nextjs/server';

export default clerkMiddleware();

export const config = {
  matcher: ['/((?!.*\\..*|_next).*)', '/', '/(api|trpc)(.*)'],
};

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "place",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@clerk/nextjs": "^6.12.5",
    "@clerk/themes": "^2.2.21",
    "@radix-ui/react-slot": "^1.1.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.482.0",
    "mongodb": "^6.14.2",
    "next": "15.2.2",
    "next-themes": "^0.4.6",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "sonner": "^2.0.1",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.2.2",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
